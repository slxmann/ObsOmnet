//
// Generated file, do not edit! Created by opp_msgtool 6.1 from src/EdgeNode/OBS_BurstSenderInfo.msg.
//

#ifndef __OBS_BURSTSENDERINFO_M_H
#define __OBS_BURSTSENDERINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class OBS_BurstSenderInfo;
/**
 * Class generated from <tt>src/EdgeNode/OBS_BurstSenderInfo.msg:23</tt> by opp_msgtool.
 * <pre>
 * // Additional burst control info included in OBS_BurstSender's automessages.
 * class OBS_BurstSenderInfo extends cObject
 * {
 *     int burstId = -1; // Internal burst Id used only by sender module. This is independent for any other Id.
 *     int burstifierId = -1; // Burstifier Id. Part of burst identifier.
 *     int numSeq = -1; // Sequence number. The other part of burst identifier.
 *     int assignedLambda = -1; // Assigned lambda.
 *     int label = -1; // Destination label.
 *       //simtime_t time; // Message creation timestamp. Used to insert into BCP's sender queue.
 * }
 * </pre>
 */
class OBS_BurstSenderInfo : public ::omnetpp::cObject
{
  protected:
    int burstId = -1;
    int burstifierId = -1;
    int numSeq = -1;
    int assignedLambda = -1;
    int label = -1;

  private:
    void copy(const OBS_BurstSenderInfo& other);

  protected:
    bool operator==(const OBS_BurstSenderInfo&) = delete;

  public:
    OBS_BurstSenderInfo();
    OBS_BurstSenderInfo(const OBS_BurstSenderInfo& other);
    virtual ~OBS_BurstSenderInfo();
    OBS_BurstSenderInfo& operator=(const OBS_BurstSenderInfo& other);
    virtual OBS_BurstSenderInfo *dup() const override {return new OBS_BurstSenderInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getBurstId() const;
    virtual void setBurstId(int burstId);

    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);

    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);

    virtual int getAssignedLambda() const;
    virtual void setAssignedLambda(int assignedLambda);

    virtual int getLabel() const;
    virtual void setLabel(int label);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OBS_BurstSenderInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OBS_BurstSenderInfo& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline OBS_BurstSenderInfo *fromAnyPtr(any_ptr ptr) { return check_and_cast<OBS_BurstSenderInfo*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OBS_BURSTSENDERINFO_M_H

