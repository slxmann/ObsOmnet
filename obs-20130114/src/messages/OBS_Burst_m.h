//
// Generated file, do not edit! Created by opp_msgtool 6.1 from ../../obs-20130114/src/messages/OBS_Burst.msg.
//

#ifndef __OBS_BURST_M_H
#define __OBS_BURST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

class OBS_Burst;
/**
 * Class generated from <tt>../../obs-20130114/src/messages/OBS_Burst.msg:28</tt> by opp_msgtool.
 * <pre>
 * packet OBS_Burst
 * {
 *     \@customize(true); //Use this to extend this message with a subclass
 *     cPacket *messages; //Message queue
 *     int numPackets = -1; //Number of packets inside the burst
 *     simtime_t minOffset = -1; //Minimum offset between BCP and Burst
 *     simtime_t maxOffset = -1; //Maximum offset between BCP and burst  
 *     int burstifierId = -1; //Burstifier id
 *     int numSeq = -1; //Sequence number into burst sender
 *     int senderId = -1; //Burst sender identifier. Should not be used as Id
 * }
 * </pre>
 *
 * OBS_Burst_Base is only useful if it gets subclassed, and OBS_Burst is derived from it.
 * The minimum code to be written for OBS_Burst is the following:
 *
 * <pre>
 * class INET_API OBS_Burst : public OBS_Burst_Base
 * {
 *   private:
 *     void copy(const OBS_Burst& other) { ... }

 *   public:
 *     OBS_Burst(const char *name=nullptr, short kind=0) : OBS_Burst_Base(name,kind) {}
 *     OBS_Burst(const OBS_Burst& other) : OBS_Burst_Base(other) {copy(other);}
 *     OBS_Burst& operator=(const OBS_Burst& other) {if (this==&other) return *this; OBS_Burst_Base::operator=(other); copy(other); return *this;}
 *     virtual OBS_Burst *dup() const override {return new OBS_Burst(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from OBS_Burst_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(OBS_Burst)
 * </pre>
 */
class INET_API OBS_Burst_Base : public ::omnetpp::cPacket
{
  protected:
    omnetpp::cPacket * messages = nullptr;
    int numPackets = -1;
    omnetpp::simtime_t minOffset = -1;
    omnetpp::simtime_t maxOffset = -1;
    int burstifierId = -1;
    int numSeq = -1;
    int senderId = -1;

  private:
    void copy(const OBS_Burst_Base& other);

  protected:
    bool operator==(const OBS_Burst_Base&) = delete;
    // make constructors protected to avoid instantiation
    OBS_Burst_Base(const char *name=nullptr, short kind=0);
    OBS_Burst_Base(const OBS_Burst_Base& other);
    // make assignment operator protected to force the user override it
    OBS_Burst_Base& operator=(const OBS_Burst_Base& other);

  public:
    virtual ~OBS_Burst_Base();
    virtual OBS_Burst_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class OBS_Burst");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const omnetpp::cPacket * getMessages() const;
    virtual omnetpp::cPacket * getMessagesForUpdate() { return const_cast<omnetpp::cPacket *>(const_cast<OBS_Burst_Base*>(this)->getMessages());}
    virtual void setMessages(omnetpp::cPacket * messages);

    virtual int getNumPackets() const;
    virtual void setNumPackets(int numPackets);

    virtual omnetpp::simtime_t getMinOffset() const;
    virtual void setMinOffset(omnetpp::simtime_t minOffset);

    virtual omnetpp::simtime_t getMaxOffset() const;
    virtual void setMaxOffset(omnetpp::simtime_t maxOffset);

    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);

    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);

    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
};


namespace omnetpp {

template<> inline OBS_Burst_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<OBS_Burst_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OBS_BURST_M_H

